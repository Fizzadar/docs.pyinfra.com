Zypper
------

:code:`zypper.packages`
~~~~~~~~~~~~~~~~~~~~~~~

Install/remove/update zypper packages & updates.

.. code:: python

    zypper.packages(
        packages=None, present=True, latest=False, update=False, clean=False,
        extra_global_install_args=None, extra_install_args=None, extra_global_uninstall_args=None,
        extra_uninstall_args=None
    )

+ **packages**: list of packages to ensure
+ **present**: whether the packages should be installed
+ **latest**: whether to upgrade packages without a specified version
+ **update**: run zypper update
+ **clean**: run zypper clean
+ **extra_global_install_args**: additional global arguments to the zypper install command
+ **extra_install_args**: additional arguments to the zypper install command
+ **extra_global_uninstall_args**: additional global arguments to the zypper uninstall command
+ **extra_uninstall_args**: additional arguments to the zypper uninstall command

Versions:
    Package versions can be pinned like zypper: ``<pkg>=<version>``

Examples:

.. code:: python

    # Update package list and install packages
    zypper.packages(
        {'Install Vim and Vim enhanced'},
        ['vim-enhanced', 'vim'],
        update=True,
    )

    # Install the latest versions of packages (always check)
    zypper.packages(
        {'Install latest Vim'},
        ['vim'],
        latest=True,
    )


:code:`zypper.repo`
~~~~~~~~~~~~~~~~~~~

Add/remove/update zypper repositories.

.. code:: python

    zypper.repo(
        name, baseurl=None, present=True, description=None, enabled=True, gpgcheck=True,
        gpgkey=None, type=None
    )

+ **name**: URL or name for the ``.repo``   file
+ **baseurl**: the baseurl of the repo (if ``name`` is not a URL)
+ **present**: whether the ``.repo`` file should be present
+ **description**: optional verbose description
+ **enabled**: whether this repo is enabled
+ **gpgcheck**: whether set ``gpgcheck=1``
+ **gpgkey**: the URL to the gpg key for this repo
+ **type**: the type field this repo (defaults to ``rpm-md``)

``Baseurl``/``description``/``gpgcheck``/``gpgkey``:
    These are only valid when ``name`` is a filename (ie not a URL). This is
    for manual construction of repository files. Use a URL to download and
    install remote repository files.

Examples:

.. code:: python

    # Download a repository file
    zypper.repo(
        {'Install container virtualization repo via URL'},
        'https://download.opensuse.org/repositories/Virtualization:containers/openSUSE_Tumbleweed/Virtualization:containers.repo',
    )

    # Create the repository file from baseurl/etc
    zypper.repo(
        {'Install container virtualization repo'},
        name='Virtualization:containers (openSUSE_Tumbleweed)',
        baseurl='https://download.opensuse.org/repositories/Virtualization:/containers/openSUSE_Tumbleweed/',
    )


:code:`zypper.rpm`
~~~~~~~~~~~~~~~~~~

Add/remove ``.rpm`` file packages.

.. code:: python

    zypper.rpm(source, present=True)

+ **source**: filename or URL of the ``.rpm`` package
+ **present**: whether ore not the package should exist on the system

URL sources with ``present=False``:
    If the ``.rpm`` file isn't downloaded, pyinfra can't remove any existing
    package as the file won't exist until mid-deploy.

Example:

.. code:: python

    zypper.rpm(
       {'Install task from rpm'},
       'https://github.com/go-task/task/releases/download/v2.8.1/task_linux_amd64.rpm'
    )


:code:`zypper.update`
~~~~~~~~~~~~~~~~~~~~~

Updates all zypper packages.

.. code:: python

    zypper.update()


Git Operations
--------------


Manage git repositories and configuration.

:code:`git.bare_repo`
~~~~~~~~~~~~~~~~~~~~~

Create bare git repositories.

.. code:: python

    git.bare_repo(path, user=None, group=None, present=True)

+ **path**: path to the folder
+ **present**: whether the bare repository should exist
+ **user**: chown files to this user after
+ **group**: chown files to this group after

Example:

.. code:: python

    git.bare_repo(
        name='Create bare repo',
        path='/home/git/test.git',
    )


:code:`git.config`
~~~~~~~~~~~~~~~~~~

Manage git config for a repository or globally.

.. code:: python

    git.config(key, value, repo=None)

+ **key**: the key of the config to ensure
+ **value**: the value this key should have
+ **repo**: specify the git repo path to edit local config (defaults to global)

Example:

.. code:: python

    git.config(
        name='Ensure user name is set for a repo',
        key='user.name',
        value='Anon E. Mouse',
        repo='/usr/local/src/pyinfra',
    )


:code:`git.repo`
~~~~~~~~~~~~~~~~

Clone/pull git repositories.

.. code:: python

    git.repo(
        src, dest, branch='master', pull=True, rebase=False, user=None, group=None,
        ssh_keyscan=False, update_submodules=False, recursive_submodules=False,
    )

+ **src**: the git source URL
+ **dest**: directory to clone to
+ **branch**: branch to pull/checkout
+ **pull**: pull any changes for the branch
+ **rebase**: when pulling, use ``--rebase``
+ **user**: chown files to this user after
+ **group**: chown files to this group after
+ **ssh_keyscan**: keyscan the remote host if not in known_hosts before clone/pull
+ **update_submodules**: update any git submodules
+ **recursive_submodules**: update git submodules recursively

Example:

.. code:: python

    git.repo(
        name='Clone repo',
        src='https://github.com/Fizzadar/pyinfra.git',
        dest='/usr/local/src/pyinfra',
    )


:code:`git.worktree`
~~~~~~~~~~~~~~~~~~~~

Manage git worktrees.

.. code:: python

    git.worktree(
        worktree, repo=None, branch=None, create_branch=False, detached=False, present=True,
        assume_repo_exists=False, force=False, user=None, group=None,
    )

+ **repo**: git main repository directory
+ **worktree**: git working tree directory
+ **branch**: branch to use for the working tree
+ **create_branch**: the branch already exist or should be created
+ **detached**: create a working tree with a detached HEAD
+ **present**: whether the working tree should exist
+ **assume_repo_exists**: whether to assume the main repo exists
+ **force**: remove unclean working tree if should not exist
+ **user**: chown files to this user after
+ **group**: chown files to this group after

Example:

.. code:: python

    git.worktree(
        name='Create a worktree (a branch `hotfix` is automatically created)',
        repo='/usr/local/src/pyinfra/master',
        worktree='/usr/local/src/pyinfra/hotfix',
    )

    git.worktree(
        name='Create a worktree with a new branch `v1.0`',
        repo='/usr/local/src/pyinfra/master',
        worktree='/usr/local/src/pyinfra/hotfix',
        branch="v1.0",
        create_branch=True
    )

    git.worktree(
        name='Create a worktree with a detached `HEAD`',
        repo='/usr/local/src/pyinfra/master',
        worktree='/usr/local/src/pyinfra/hotfix',
        detached=True,
    )

    git.worktree(
        name='Create a worktree from the existing branch `v1.0`',
        repo='/usr/local/src/pyinfra/master',
        worktree='/usr/local/src/pyinfra/hotfix',
        branch='v1.0'
    )

    git.worktree(
        name='Remove a worktree',
        worktree='/usr/local/src/pyinfra/hotfix',
        present=False,
    )

    git.worktree(
        name='Remove an unclean worktree',
        worktree='/usr/local/src/pyinfra/hotfix',
        present=False,
        force=True,
    )

